<script src="https://cdn.socket.io/4.1.2/socket.io.js" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>


<script>
    let pauseUpdateHover = false;
    let passedNotif = 1;
    const socket = io(
        "ws://" + "localhost" + ":" + "3000" + "/",
        {
            transports: ["websocket", "polling"],
            withCredentials: true,
            auth: {
                token: "<%= userDiscord.apiToken %>",
            },
        }
    );
</script>
<script>
    function isFocused(){
        if(
            document.activeElement.tagName === "INPUT" ||
            document.activeElement.tagName === "BUTTON"
            ) {
                new Noty({
                    theme: 'nest',
                    timeout: 5000, 
                    queue: "TO_UPDATE",
                    killer: 'TO_UPDATE',
                    type: 'info', 
                    layout: 'bottomLeft', 
                    text: '<b>Info:</b><br>There ' + (passedNotif === 1 ? 'is ' : 'are ') + passedNotif++ + ((passedNotif-1) === 1 ? ' update' : ' updates') + '. Refresh the page to see them.'}).show(); 
                return true;
            }
        
        if(!pauseUpdateHover && passedNotif > 1) {
            updatePlayers();
            passedNotif = 0;
            new Noty({
                    theme: 'nest',
                    timeout: 5000,
                    queue: "UPDATED",
                    killer: 'UPDATED',
                    type: 'info',
                    layout: 'bottomLeft',
                    text: '<b>Info:</b><br>We did update your table, no need to auto refresh.<br><span style="font-size: 8px">Auto Refresh works only when you are not hovering over the tables and not focusing to input fields or pressing to SETTINGS.</span>'
                }).show();
        }
        return false;
    }

    function isHovering(status){
        if(status) return pauseUpdateHover = true;
        return pauseUpdateHover = false;
    }

</script>

<script>
    let admins = 0;
    Noty.setMaxVisible(4);
    socket.on("connect", () => {
        new Noty({
            theme: 'nest',
            timeout: 2200,
            type: 'success',
            visibilityControl: 'true',
            layout: 'topRight',
            text: '<b>Reminder:</b><br>You are connected with SquadJS.'
        }).show();
    });


    // Place holder! SQUADJS needs to have a function to return active admins!


    socket.on('CHAT_MESSAGE', async (data) => {
      const command = data.message.match(/!([^ ]+) ?(.*)/);
      if (command) {
        const adminRequest = command[1].toLowerCase();
        if(adminRequest == "admin"){
            console.log("admin huh ?");
            await socket.emit("players", (playersList) => {
                // TODO: GET THE ADMINS BRUH <3 placeholder below: 
                let adminsList = ["76561197973047706", "76561197975723789"];
                // Count how much times playerList includes adminsList
                for(let i = 0; i < playersList.length; i++){
                    if(adminsList.includes(playersList[i].steamID)) admins++;
                }
            })
            new Noty({
                theme: 'nest',
                timeout: 10000,
                layout: 'bottom',
                queue: 'ADMIN_REQUEST',
                killer: true,
                type: 'error',
                visibilityControl: 'true',
                text: `<b>Admin Request:</b>
                <br><b>Active In-Game Admins:</b> <span style="text-color: lightblue">${admins}</span>
                <br><b>Request:</b> <span style="text-color: lightblue">${command[2].trim()}</span>
                <br><b>Steam:</b> <a style="text-decoration: none;" href="http://steamcommunity.com/profiles/${data.player.steamID}" target="_blank">${data.player.name}</a>
                `
            }).show();
        }
      }
    });

    socket.on("PLAYER_CONNECTED", async (data) => {
        new Noty({
            theme: 'nest',
            timeout: 2500,
            layout: 'bottomRight',
            queue: 'PLAYER_CONNECTED',
            killer: 'PLAYER_CONNECTED',
            type: 'success',
            text: `ðŸ”Œ ${data.player?.name} connected`,
        }).show();
        if(window.location.href === `${window.location.origin}/players` && data.player?.name){
            const interacting = await isFocused();
            if(interacting || pauseUpdateHover) {
                return;
            }
            addPlayer(data?.player);
        }
    });

    socket.on("PLAYER_SQUAD_CHANGE", async (data) => {
        if(!data.player) return;

        if(data.newSquadID) {
            if(data.oldSquadID){
                new Noty({
                    layout: 'bottomLeft',
                    theme: 'nest',
                    timeout: 2500,
                    queue: 'PLAYER_SQUAD_CHANGE',
                    killer: 'PLAYER_SQUAD_CHANGE',
                    type: 'warning',
                    text: `<b>Squad Change</b><br>${data.player?.name} moved to ${data.player?.squad?.squadName}!`,
                }).show();
            } else {
                new Noty({
                    layout: 'bottomLeft',
                    theme: 'nest',
                    timeout: 2500,
                    queue: 'PLAYER_SQUAD_CHANGE',
                    killer: 'PLAYER_SQUAD_CHANGE',
                    type: 'success',
                    text: `<b>Squad Join</b><br>${data.player?.name} joined ${data.player?.squad?.squadName}!`,
                }).show();
            }
        } else {
            new Noty({
                layout: 'bottomLeft',
                theme: 'nest',
                timeout: 2500,
                queue: 'PLAYER_SQUAD_CHANGE',
                killer: 'PLAYER_SQUAD_CHANGE',
                type: 'error',
                text: `<b>Left Squad</b><br>${data.player?.name} left his squad!`,
            }).show();
        }
        if(window.location.href === `${window.location.origin}/players` && data.player?.name){
            const interacting = await isFocused();
            if(interacting || pauseUpdateHover) {
                return;
            }
            await removePlayer(data.player);
            await addPlayer(data.player);
        }
    });

    socket.on("PLAYER_DISCONNECTED", async (data) => {
        new Noty({
            theme: 'nest',
            timeout: 2000,
            layout: 'bottomRight',
            queue: 'PLAYER_DISCONNECTED',
            killer: 'PLAYER_DISCONNECTED',
            type: 'error',
            text: `ðŸ˜– ${data.player?.name || data.chainID} disconnected.`,
        }).show();
        if(window.location.href === `${window.location.origin}/players`){
            const interacting = await isFocused();
            if(interacting || pauseUpdateHover) {
                return;
            }
            removePlayer(data);
        }
    });
</script>

<script>
    function kick(steamID) {
        Swal.fire({
            title: 'Reason:',
            input: 'text',
            inputAttributes: {
                autocapitalize: 'off'
            },
            showCancelButton: true,
            confirmButtonText: 'Kick',
            allowOutsideClick: () => !Swal.isLoading()
            }).then(async (result) => {
                Swal.showLoading()
                if (result.isConfirmed) {
                    await axios.post(`${window.location.origin}/squad-api/kick`, {
                        steamUID: steamID,
                        reason: result.value
                    })
                    .then((response) => {
                        if(!response.data.status) return Swal.fire(`Error`,`Error while getting response.`,`error`);
                        if(response.data.status === "ok") {
                            if(window.location.href === `${window.location.origin}/players`){
                                createTable1();
                                createTable2();
                                filterTable1();
                                filterTable2();
                            }
                            
                            Toast.fire({
                                icon: 'success',
                                title: 'Player has been kicked.'
                            })

                        }
                        if(response.data.status === "nok") {
                            Swal.fire(`There was an error`,`We couldn't kick the player. Please try again later.`,`error`);
                        }
                        if(response.data.status === "nok2") {
                            Swal.fire(`Insufficent Permissions`,`We couldn't perform your requested action. You don't have the right role to perform this action.`,`warning`);
                        }
                    })
                    .catch((error) => {
                        return Swal.fire(`Error`,`Error: ${error}`,`error`);
                    });
                }
            })
    }
</script>

<script>
    function warn(steamID) {
        Swal.fire({
            title: 'Warn Message:',
            input: 'text',
            inputAttributes: {
                autocapitalize: 'off'
            },
            showCancelButton: true,
            confirmButtonText: 'Warn',
            allowOutsideClick: () => !Swal.isLoading()
            }).then(async (result) => {
                if (result.isConfirmed) {
                    await axios.post(`${window.location.origin}/squad-api/warn`, {
                        steamUID: steamID,
                        reason: result.value
                    })
                    .then((response) => {
                        if(!response.data.status) return Swal.fire(`Error`,`Error while getting response.`,`error`);
                        if(response.data.status === "ok") {
                            Toast.fire({
                                icon: 'success',
                                title: 'Player has been warned.'
                            })
                        }
                        if(response.data.status === "nok") {
                            Swal.fire(`There was an error`,`We couldn't warn the player. Please try again later.`,`error`);
                        }
                        if(response.data.status === "nok2") {
                            Swal.fire(`Insufficent Permissions`,`We couldn't perform your requested action. You don't have the right role to perform this action.`,`warning`);
                        }
                    })
                    .catch((error) => {
                        return Swal.fire(`Error`,`Error: ${error}`,`error`);
                    });
                }
            })
    }
</script>

<script>
    function ban(steamID) {
        Swal.fire({
            title: 'Ban Details:',
            input: 'text',
            inputAttributes: {
                autocapitalize: 'off'
            },
            showCancelButton: true,
            confirmButtonText: 'Ban',
            allowOutsideClick: () => !Swal.isLoading()
            }).then(async (result) => {
                if (result.isConfirmed) {
                    await axios.post(`${window.location.origin}/squad-api/ban`, {
                        steamUID: steamID,
                        reason: result.value
                    })
                    .then((response) => {
                        if(!response.data.status) return Swal.fire(`Error`,`Error while getting response.`,`error`);
                        if(response.data.status === "ok") {
                            if(window.location.href === `${window.location.origin}/players`){
                                createTable1();
                                createTable2();
                                filterTable1();
                                filterTable2();
                            }
                            Toast.fire({
                                icon: 'success',
                                title: 'Player has been banned.'
                            })
                        }
                        if(response.data.status === "nok") {
                            Swal.fire(`There was an error`,`We couldn't ban the player. Please try again later.`,`error`);
                        }
                        if(response.data.status === "nok2") {
                            Swal.fire(`Insufficent Permissions`,`We couldn't perform your requested action. You don't have the right role to perform this action.`,`warning`);
                        }
                    })
                    .catch((error) => {
                        return Swal.fire(`Error`,`Error: ${error}`,`error`);
                    });
                }
            })
    }
</script>

<script>
    function disbandSquad(teamID, squadID) {
        console.log(`TeamID: ${teamID} and squadID: ${squadID}`);
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            showCancelButton: true,
            confirmButtonText: 'Disband',
            allowOutsideClick: () => !Swal.isLoading()
            }).then(async (result) => {
                Swal.showLoading()
                if (result.isConfirmed) {
                    await axios.post(`${window.location.origin}/squad-api/disbandSquad`, {
                        squadID: squadID,
                        teamID: teamID
                    })
                    .then((response) => {
                        if(!response.data.status) return Swal.fire(`Error`,`Error while getting response.`,`error`);
                        if(response.data.status === "ok") {
                            if(window.location.href === `${window.location.origin}/players`){
                                createTable1();
                                createTable2();
                                filterTable1();
                                filterTable2();
                            }
                            Toast.fire({
                                icon: 'success',
                                title: 'Squad is disband.'
                            })
                        }
                        if(response.data.status === "nok") {
                            Swal.fire(`There was an error`,`We couldn't disband the squad. Please try again later.`,`error`);
                        }
                        if(response.data.status === "nok2") {
                            Swal.fire(`Insufficent Permissions`,`We couldn't perform your requested action. You don't have the right role to perform this action.`,`warning`);
                        }
                    })
                    .catch((error) => {
                        console.log(error);
                        return Swal.fire(`Error`,`Error: ${error}`,`error`);
                    });
                }
            })
    }
</script>


<script>
    function removeFromSquad(steamID) {
        console.log(`steamUID: ${steamID}`);
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            showCancelButton: true,
            confirmButtonText: 'Kick From Squad',
            allowOutsideClick: () => !Swal.isLoading()
            }).then(async (result) => {
                Swal.showLoading()
                if (result.isConfirmed) {
                    await axios.post(`${window.location.origin}/squad-api/removeFromSquad`, {
                        steamID: steamID
                    })
                    .then((response) => {
                        if(!response.data.status) return Swal.fire(`Error`,`Error while getting response.`,`error`);
                        if(response.data.status === "ok") {
                            if(window.location.href === `${window.location.origin}/players`){
                                createTable1();
                                createTable2();
                                filterTable1();
                                filterTable2();
                            }
                            Toast.fire({
                                icon: 'success',
                                title: 'Removed from the squad.'
                            })
                        }
                        if(response.data.status === "nok") {
                            Swal.fire(`There was an error`,`We couldn't remove the player from the squad. Please try again later.`,`error`);
                        }
                        if(response.data.status === "nok2") {
                            Swal.fire(`Insufficent Permissions`,`We couldn't perform your requested action. You don't have the right role to perform this action.`,`warning`);
                        }
                    })
                    .catch((error) => {
                        console.log(error);
                        return Swal.fire(`Error`,`Error: ${error}`,`error`);
                    });
                }
            })
    }
</script>