<!DOCTYPE html>
<html>
	<%- include('../includes/head') %>
	<%- include('../includes/socketio') %>
	<body>
		<!-- The sidebar includes the menu -->
		<%- include('../partials/sidebar') %>
		<div class="main-content">
		<!-- Top navbar -->
		<%- include('../partials/navbar') %>
		<!-- Header -->
		<%- include('../partials/header') %>
		<style>
			img { 
				-webkit-user-drag: none; 
				-khtml-user-drag: none; 
				-moz-user-drag: none; 
				-o-user-drag: none; 
				user-drag: none; 
			}

			.sortable-chosen, sortable-chosen.sortable-ghost {
				opacity: 0;
			}
			.sortable-ghost {
				background-color: #dadada;
				opacity: 1;
			}

		</style>

			<!-- Content Wrapper. Contains page content -->
			<div class="container-fluid mt--7">
				<div class="card bg-gradient-neutral shadow p-5">
					<h4><span class="badge badge-primary ">BETA</span> Map Vote Starter</h4>
					<div class="row"  id="sortablelist" data-id="1">
					<% for(let i = 0; i < 3; i++) { %>
						<!-- Displays 4 servers by line -->
						<div class="col-md-4" data-id="<%= i %>">
							<div class="box box-solid m-2">
								<div class="box-header text-center">
									<h3 id="Layer_Name_<%= i %>" style="text-align: center !important;" class="box-title server-name text-center"><i class="fas fa-map"></i> Al Basrah Test <%- i %></h3>
								</div>
								<!-- /.box-header -->
								<div class="box-body m-2">
									<div  draggable="true" class="text-center">
										<li style="list-style-type: none;" data-value="Al_Basrah_Test_<%- i %>">
											<img id="Layer_Image_<%- i %>" draggable="false" src="" style="border-radius:10%" width="200" height="200" class="img-fluid">
										</li>
									</div>
								</div>
								<!-- /.box-footer -->
								<div class="box-footer m-2 text-center">
									<button class="btn btn-primary btn-lg" onclick="changeLayer('<%= i %>')">Change the Layer</button>
								</div>
							</div>
							<!-- /.box -->
						</div>
						<!-- /.col -->
					<% } %>
				</div>
				<div class="row mt-4">
					<div class="col-md-12">
						<div class="text-center">
							<button class="btn btn-success btn-lg" onclick="startVote()">Start the Vote</button>
						</div>
					</div>
				</div>
				<!-- Footer includes credits and version -->
			</div>
			<%- include('../partials/footer') %>
		</div>
		<%- include('../partials/scripts') %>
		<script>
			async function getAllMaps() {
				let maps;
				await axios.get(`https://raw.githubusercontent.com/Squad-Wiki-Editorial/squad-wiki-pipeline-map-data/master/completed_output/_Current%20Version/finished.json`).then(async (res) =>{
					maps = await res.data.Maps.map(map => {
						return `<option value="${map.rawName}">${map.rawName}</option>`
					});
				});
				return maps;
			}
			async function changeLayer(ImageId){
				const imageBox = document.getElementById(`Layer_Image_${ImageId}`);
				Swal.fire({
					title: `Select the layer`,
					input: 'select',
					inputOptions: await getAllMaps(),
					inputPlaceholder: `Choose a layer...`,
					showCancelButton: true,
				}).then(async (result) => {
					if (result.isConfirmed) 
					{
						const maps = await getAllMaps();
						for(let i = 0; i < maps.length; i++){
							if(i == result.value){
								// get first match from maps[i] by this regex: "^<option.*>(.*)<\/option>$"
								const mapName = maps[i].match(/^<option.*>(.*)<\/option>$/)[1];
								imageBox.setAttribute(
									"src", 
									`https://squad-data.nyc3.cdn.digitaloceanspaces.com/main/${mapName}.jpg`
									);
								document.getElementById(`Layer_Name_${ImageId}`).innerText = mapName;
							} 
						}
					}
				});
			}

			async function startVote(){
				let toVotelayers = [];
				let timeOut;
				let minVotes;


				// Put the layer names to the maps array
				for(let i = 0; i < 3; i++){
					toVotelayers.push(document.getElementById(`Layer_Name_${i}`).innerText);
				}

				Swal.fire({
					title: 'Are you sure?',
					text: "If you go further you will start the map voting!",
					showCancelButton: true,
					confirmButtonText: 'Start the Vote!',
					allowOutsideClick: () => !Swal.isLoading()
				}).then(async (result) => {
					if (result.isConfirmed) {
						Swal.fire({
							title: 'How much minutes should the voting last?',
							icon: 'question',
							input: 'range',
							confirmButtonText: 'Next',
							inputLabel: 'Minutes',
							inputAttributes: {
								min: 1,
								max: 6,
								step: 1
							},
							inputValue: 3
						}).then(async (result2) => {
							if (result2.isConfirmed) {

								timeOut = result2.value;
								Swal.fire({
									title: 'What is the minimum amount of votes to set the next layer?',
									icon: 'question',
									input: 'range',
									confirmButtonText: 'Next',
									inputLabel: 'Amount of Votes',
									inputAttributes: {
										min: 1,
										max: 99,
										step: 1
									},
									inputValue: 30
								}).then(async (result3) => {
									if (result3.isConfirmed) {
										await axios.post(`${window.location.origin}/squad-api/mapvote/start`, {
											layers: toVotelayers,
											timeOut: timeOut,
											minVote: result3.value,
										}).then((response) => {
											if (!response.data.status) return Swal.fire(`Error`, `Error while getting response.`, `error`);
											if (response.data.status === "ok") {
												Toast.fire({
													icon: 'success',
													title: response.data.message
												})
											}
											if (response.data.status === "nok") {
												Swal.fire(`There was an error`, `We couldn't start the voting. Please try again later.`, `error`);
											}
											if (response.data.status === "nok2") {
												Swal.fire(`Insufficent Permissions`, `We couldn't perform your requested action. You don't have the right role to perform this action.`, `warning`);
											}
										})
										.catch((error) => {
											return Swal.fire(`Error`, `Error: ${error}`, `error`);
										});
									}
								});
							}
						});
					}
				})
			}

			// on document ready to show the DOM elements
			document.addEventListener('DOMContentLoaded', async () => {
				// get all the maps
				await getAllMaps().then(maps => {
					// get all the images
					const images = document.getElementsByClassName('img-fluid');
					// loop through all the images
					for(let i = 0; i < images.length; i++){
						const randomPickedImage = maps[Math.floor(Math.random() * 30)].match(/^<option.*>(.*)<\/option>$/)[1];
						// set the image src
						images[i].setAttribute(
						"src", 
						`https://squad-data.nyc3.cdn.digitaloceanspaces.com/main/${randomPickedImage}.jpg`
						);
						document.getElementById(`Layer_Name_${i}`).innerText = randomPickedImage;
						maps = maps.filter(map => map !== randomPickedImage);
					}
				});
			});


			<% c.on("PLAYER_VOTED", async (currentResuls) => { %>
				<%= console.log(`<b>A Vote Recorded:</b><br><b>Current Results:</b> <br><span style="text-color: lightblue">Layer: ${currentResuls[0].layer} - votes: ${currentResuls[0].votes}</span><br><span style="text-color: lightblue">Layer: ${currentResuls[1].layer} - votes: ${currentResuls[1].votes}</span><br><span style="text-color: lightblue">Layer: ${currentResuls[2].layer} - votes: ${currentResuls[2].votes}</span>`) %>
			<% }); %>

			socket.on("SJSPRO_MAPVOTE_VOTED", async (result, map, currentResuls) => {
				new Noty({
                    theme: 'nest',
                    timeout: 10000,
                    layout: 'topRight',
                    killer: true,
                    type: 'error',
                    visibilityControl: 'true',
                    text: `<b>A Vote Recorded:</b>
                <br><b>User:</b> <span style="text-color: lightblue"> <a style="text-decoration: none;" href="http://steamcommunity.com/profiles/${data.player?.steamID}" target="_blank">${data.player?.name}</a></span>
                <br><b>Voted to:</b> <span style="text-color: lightblue">${map}</span>
				<br><b>Current Results:</b> 
				<br><span style="text-color: lightblue">Layer: ${currentResuls[0].layer} - votes: ${currentResuls[0].votes}</span>
				<br><span style="text-color: lightblue">Layer: ${currentResuls[1].layer} - votes: ${currentResuls[1].votes}</span>
				<br><span style="text-color: lightblue">Layer: ${currentResuls[2].layer} - votes: ${currentResuls[2].votes}</span>
                `
                }).show();
			})

			socket.on("SJSPRO_MAPVOTE_ENDED", async (result) => {
				new Noty({
                    theme: 'nest',
                    timeout: 10000,
                    layout: 'bottom',
                    queue: 'MAP_VOTE',
                    killer: true,
                    type: 'error',
                    visibilityControl: 'true',
                    text: `<b>A Vote Recorded:</b>
                <br><b>User:</b> <span style="text-color: lightblue"> <a style="text-decoration: none;" href="http://steamcommunity.com/profiles/${data.player?.steamID}" target="_blank">${data.player?.name}</a></span>
                <br><b>Voted to:</b> <span style="text-color: lightblue">${map}</span>
				<br><b>Current Results:</b> 
				<br><span style="text-color: lightblue">Layer: ${currentResuls[0].layer} - votes: ${currentResuls[0].votes}</span>
				<br><span style="text-color: lightblue">Layer: ${currentResuls[1].layer} - votes: ${currentResuls[1].votes}</span>
				<br><span style="text-color: lightblue">Layer: ${currentResuls[2].layer} - votes: ${currentResuls[2].votes}</span>
                `
                }).show();
			})
			
		</script>
	</body>
</html>
