<!DOCTYPE html>
<html>
    
	<%- include('../includes/head') %>
    
    <body>
	<!-- The sidebar includes the menu -->
    <%- include('../partials/sidebar') %>
	<div class="main-content">
		<!-- Top navbar -->
		<%- include('../partials/navbar') %>
		<!-- Header -->
		<%- include('../partials/header') %>

		<!-- Content Wrapper. Contains page content -->
        <div class="container-fluid mt--7">
            <div class="card bg-gradient-neutral shadow p-5">

				<!-- Content Header (Page header) -->
				<section class="content-header">
					<h1> <%= translate("common:CONFIGURATION") %> </h1>
					<ol class="breadcrumb">
                        <li><a href="/"><i class="fa fa-home"></i> <%= translate("dashboard:SELECTOR") %> </a></li>
                        <li class="active">&nbsp; / &nbsp;<%= guild.name %></li>
					</ol>
				</section>

				<section class="content">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="box box-widget widget-user text-center">
                                <div class="widget-user-header bg-aqua-active">
                                    <h3 class="widget-user-username"><%= guild.name %></h3>
                                </div>
                                <div class="widget-user-image">
                                    <img class="rounded-circle" src="<%= guild.iconURL %>" alt="Server icon">
                                </div>
                                <div class="box-footer">
                                    <div class="row">
                                        <div class="col-sm-12 border-right">
                                            <div class="description-block">
                                                <h5 class="display-3"><%= memberCount %></h5>
                                                <span class="lead"><%= translate("common:MEMBERS") %></span>
                                            </div>
                                            <!-- /.description-block -->
                                        </div>
                                        <!-- /.col -->
                                    </div>
                                    <!-- /.row -->
                                </div>
                                <!-- /.box-footer -->
                            </div>
                            <!-- BASIC CONFIGURATION -->
                            <div class="box box-warning">
                                <div class="box-header with-border">
                                    <h3 class="box-title"><%= translate("dashboard:BASIC_CONF") %></h3>
                                </div>
                                <form role="form" action="/manage/<%= guild.id %>/" method="POST">
                                    <!-- /.box-header -->
                                    <div class="box-body">
                                        <!-- text input -->
                                        <div class="form-group">
                                            <label><%= translate("common:PREFIX") %></label>
                                            <input type="text" name="prefix" class="form-control" placeholder="<%= guild.prefix %>">
                                        </div>
                                        <!-- select -->
                                        <div class="form-group mt--2">
                                            <label><%= translate("common:LANGUAGE") %></label>
                                            <select class="form-control" name="language">
                                                <% bot.languages.forEach((language) => { %>
                                                    <% if(guild.language === language.name){ %>
                                                        <option selected="selected"><%= language.aliases[0] %></option>
                                                    <% } else { %>
                                                        <option><%= language.aliases[0] %></options>
                                                    <% } %>
                                                <% }) %>
                                            </select>
                                        </div>
                                    </div>
                                    <!-- /.box-body -->
                                    <div class="box-footer mt--3">
                                        <button type="submit" class="btn btn-primary"><%= translate("common:UPDATE") %></button>
                                    </div>
                                </form>
                            </div>
                            <!-- /.box -->
                            <!-- SPECIAL CHANNELS -->
                            <div class="box box-warning mt-4">
                                <div class="box-header with-border">
                                    <h3 class="box-title"><%= translate("dashboard:CHANNELS_CONF") %></h3>
                                </div>
                                <form role="form" action="/manage/<%= guild.id %>/" method="POST">
                                    <!-- /.box-header -->
                                    <div class="box-body">
                                        <!-- select -->
                                        <div class="form-group">
                                            <label><%= translate("common:SUGGESTIONS") %></label>
                                            <select class="form-control" name="suggestions">
                                                <% if(guild.plugins.suggestions && bot.channels.cache.has(guild.plugins.suggestions)){ %>
                                                    <option selected="selected">#<%= bot.channels.cache.get(guild.plugins.suggestions).name %></option>
                                                    <% guild.channels.cache.filter((ch) => ch.type === "GUILD_TEXT" && ch.id !== guild.plugins.suggestions).forEach((ch) => { %>
                                                        <option>#<%= ch.name %></option>
                                                    <% }); %>
                                                        <option><%= translate("common:NO_CHANNEL") %></option>
                                                <% } else { %>
                                                    <option selected="selected"><%= translate("common:NO_CHANNEL") %></option>
                                                    <% guild.channels.cache.filter((ch) => ch.type === "GUILD_TEXT").forEach((ch) => { %>
                                                        <option>#<%= ch.name %></option>
                                                    <% }); %>
                                                <% } %>
                                            </select>
                                        </div>
                                        <div class="form-group mt--2">
                                            <label><%= translate("common:MODLOGS") %></label>
                                            <select class="form-control" name="modlogs">
                                                <% if(guild.plugins.modlogs && bot.channels.cache.has(guild.plugins.modlogs)){ %>
                                                    <option selected="selected">#<%= bot.channels.cache.get(guild.plugins.modlogs).name %></option>
                                                    <% guild.channels.cache.filter((ch) => ch.type === "GUILD_TEXT" && ch.id !== guild.plugins.modlogs).forEach((ch) => { %>
                                                        <option>#<%= ch.name %></option>
                                                    <% }); %>
                                                        <option><%= translate("common:NO_CHANNEL") %></option>
                                                <% } else { %>
                                                    <option selected="selected"><%= translate("common:NO_CHANNEL")%></option>
                                                    <% guild.channels.cache.filter((ch) => ch.type === "GUILD_TEXT").forEach((ch) => { %>
                                                        <option>#<%= ch.name %></option>
                                                    <% }); %>
                                                <% } %>
                                            </select>
                                        </div>
                                    </div>
                                    <!-- /.box-body -->
                                    <div class="box-footer mt--3">
                                        <button type="submit" class="btn btn-primary"><%= translate("common:UPDATE") %></button>
                                    </div>
                                </form>
                            </div>
                            <!-- /.box -->
                        </div>
                        <div class="col-md-6">
                            <!-- SQUAD CONFIGURATION -->
                            <div class="box box-success">
                                <div class="box-header with-border">
                                    <h3 class="box-title"><%= translate("dashboard:SQUAD") %></h3>
                                </div>
                                <form role="form" action="/manage/<%= guild.id %>/" method="POST" autocomplete="off">
                                    <!-- /.box-header -->
                                    <div class="box-body">
                                        <!-- text input -->
                                        <div class="form-row">
                                            <div class="form-group col-md-6">
                                            <label for="host"><%= translate("squad/addsquadserver:HOSTS") %></label>
                                            <textarea rows="1" type="text" class="form-control mb-2 mr-sm-2 mb-sm-0" id="host" name="host" required><%= (translate('squad/addsquadserver:HOST', { host: guild.plugins.squad.db.host || '❌',})) %></textarea>
                                            <small class="text-muted">
                                                Example; <code>localhost</code>
                                              </small>
                                        </div>
                                            <div class="form-group col-md-6">
                                              <label for="port"><%= translate("squad/addsquadserver:PORTS") %></label>
                                              <textarea rows="1" type="numbers" class="form-control" id="port" name="port" required><%= (translate('squad/addsquadserver:PORT', { port: guild.plugins.squad.db.port || '❌',})) %></textarea>
                                              <small class="text-muted">
                                                Example; <code>3306</code>
                                              </small>
                                            </div>
                                        </div>
                                        
                                        <div class="form-row">
                                            <div class="form-group col-md-6">
                                            <label for="database"><%= translate("squad/addsquadserver:DATABASES") %></label>
                                            <textarea rows="1" type="text" class="form-control mb-2 mr-sm-2 mb-sm-0" name="database" id="database" required><%= (translate('squad/addsquadserver:DATABASE', { database: guild.plugins.squad.db.database || '❌',})) %></textarea>
                                            </div>
                                            <div class="form-group col-md-6">
                                              <label for="serverID"><%= translate("squad/addsquadserver:SERVER_IDS") %></label>
                                              <textarea rows="1" type="text" class="form-control" name="serverID" id="serverID" required><%= (translate('squad/addsquadserver:SERVER_ID', { id: guild.plugins.squad.db.serverID || '❌',})) %></textarea>
                                              <small class="text-muted">
                                                Example; <code>1,2,3</code>
                                              </small>
                                            </div>
                                        </div>
                                        <div class="form-row">
                                            <div class="form-group col-md-6">
                                              <label for="user"><%= translate("squad/addsquadserver:USERS") %></label>
                                              <textarea rows="1" type="numbers" class="form-control" name="user" id="user"><%= (translate('squad/addsquadserver:USER', { user: guild.plugins.squad.db.user || '❌',})) %></textarea>
                                            </div>
                                            <div class="form-group col-md-6">
                                                <label for="password"><%= translate("squad/addsquadserver:PASSWORDS") %></label>
                                                <textarea rows="1" type="text" class="form-control" id="password" name="password" ><%= (translate('squad/addsquadserver:PASSWORD', { password: guild.plugins.squad.db.password ? '✔️' : '❌',})) %></textarea>
                                                <% if (guild.plugins.squad.db.password) { %>
                                                    <small class="text-muted text-green">
                                                        You can update without re-writing this if you want to hold the old password.
                                                    </small>
                                                <% } %>  
                                            </div>
                                        </div>
                                        <div class="form-group mt--2">
                                            <div class="checkbox">
                                                <label>
                                                    <% if(guild.plugins.squad.stats.rolesEnabled) { %>
                                                        <input type="checkbox" name="rolesEnabled" checked> <%= translate("dashboard:SQUAD_ROLES") %>
                                                    <% } else { %>
                                                        <input type="checkbox" name="rolesEnabled"> <%= translate("dashboard:SQUAD_ROLES") %>
                                                    <% } %>
                                                </label>
                                            </div>
                                            <div class="checkbox">
                                                <label>
                                                    <% if(guild.plugins.squad.stats.rolesGiven) { %>
                                                        <input type="checkbox" name="rolesGiven" checked> <%= translate("dashboard:SQUAD_ROLES_GIVEN") %>
                                                    <% } else { %>
                                                        <span class="text-red badge badge-danger"><%= translate("dashboard:SQUAD_ROLES_GIVEN_READY") %></span>
                                                    <% } %>
                                                </label>
                                            </div>
                                        </div>
                                    <!-- /.box-body -->
                                    <div class="box-footer mt--3">
                                        <% if(guild.plugins.squad.stats.enabled){ %>
                                            <button type="submit" name="squadDisable" class="btn btn-danger"> <%= translate("dashboard:DISABLE_SQUAD") %></button>
                                            <button type="submit" name="squadUpdate" class="btn btn-primary pull-right"> <%= translate("common:UPDATE") %></button>
                                        <% } else { %>
                                            <button type="submit" name="squadEnable" class="btn btn-success"> <%= translate("dashboard:ENABLE_SQUAD") %></button>
                                        <% } %>
                                    </div>
                                </form>
                                <div class='mx-auto card m-4 p-4'>
                                    <div class="widget-clan-header bg-aqua-active">
                                        <h3 class="widget-clan-clanname text-center">Clan Management</h3>
                                    </div>
                                    <table id="datatable" class="table datatable text-center">
                                        <thead>
                                            <tr>
                                                <th>Name</th>
                                                <th>Size</th>
                                                <th>Limit</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <% for(clan in clans) {%>
                                                <tr id="<%- clans[clan].id %>">
                                                    <td>
                                                        <%- clans[clan].name %>
                                                    </td>
                                                    <td>
                                                        <%- clans[clan].size %>
                                                    </td>
                                                    <td>
                                                        <%- clans[clan].whitelistLimit %>
                                                    </td>
                                                    <td>
                                                        <button type="button" onclick="changeLimit('<%- clans[clan].id %>', '<%- clans[clan].name %>')" style="font-size: 10px !important;" class="badge btn btn-danger">Change Limit</button>
                                                        <button type="button" onclick="disbandSquad('<%- clans[clan].id %>')" style="font-size: 10px !important;" class="badge btn btn-dark">Disband</button>
                                                    </td>
                                                </tr>
                                            <% }; %>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                        <div class="box-header with-border">
                            <h3 class="box-title">All Users</h3>
                        </div>
                        <div class="row mt-4">
                            <div class="col-12">
                                
                                        <table class="datatable table table-bordered table-striped" style="width: 100% !important;">
                                            <thead>
                                                <tr>
                                                    <th>User</th>
                                                    <th>Roles</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <% for(var i = 0; i < allUsers.length; i++) { %>
                                                    <% if(allUsers[i].steam) { %>
                                                    <tr>
                                                        <td> 
                                                            <div class="media align-items-center">
                                                                <%- allUsers[i].steam ? `<span class="avatar avatar-sm rounded-circle"><a href="${allUsers[i].steam.profileurl}" target="_blanc"><img alt="Avatar" src="${allUsers[i].steam.avatar}"></span><div class="media-body ml-2 d-none d-lg-block"><span class="mb-0 text-sm font-weight-bold">${allUsers[i].steam?.personaname}</span><span class="text-xs text-muted d-block">${allUsers[i].steam?.steamid}</span></div></a>` : `<span class="avatar avatar-sm rounded-circle"><img alt="Avatar" src="${userDiscord.displayAvatarURL}"></span> <div class="media-body ml-2 d-none d-lg-block"><span class="mb-0 text-sm font-weight-bold">${userDiscord.tag}</span></div>` %>
                                                            </div>
                                                        </td>
                                                        <td>
                                                            <% for( let z = 0; z < allUsers[i].roles.length; z++) { %>
                                                                <label for="<%= allUsers[i].id+':-:'+allUsers[i].roles[z] %>" class="badge"><%= allUsers[i].roles[z] %></label>
                                                                <input id="<%= allUsers[i].id+':-:'+allUsers[i].roles[z] %>" onchange="toggleRole('<%=allUsers[i].id%>', '<%=allUsers[i].roles[z]%>')" name="toggle-test" type="checkbox" data-style="ios" data-toggle="toggle" data-size="xs" data-on="On" data-off="Off" checked>
                                                            <% } %>
                                                            <% let uncheckedRoles = allRoles.filter(role => !allUsers[i].roles.includes(role)); %>
                                                            <% for( let x = 0; x < uncheckedRoles.length; x++) { %>
                                                                <label for="<%= allUsers[i].id+':-:'+uncheckedRoles[x] %>" class="badge"><%= uncheckedRoles[x] %></label>
                                                                <input id="<%= allUsers[i].id+':-:'+uncheckedRoles[x] %>" onchange="toggleRole('<%=allUsers[i].id%>', '<%=uncheckedRoles[x]%>')" name="toggle-test" type="checkbox" data-style="ios" data-toggle="toggle" data-size="xs" data-on="On" data-off="Off" >
                                                            <% } %>
                                                          </td>
                                                    </tr>
                                                    <% } %>
                                                <% } %>
                                            </tbody>
                                        </table>
                        </div>
                        <div class="box-header with-border">
                            <h3 class="box-title">Panel Roles</h3>
                        </div>
                        <div class="row">
                        <% for(i in allRoles){ %>
                            <div class="col-sm-3 m-2">
                                <div class="card">
                                    <div class="card-body">
                                    <span class="card-title badge badge-dark" style="font-size: 1.5em !important;"><%= allRoles[i] %><span class="text-warning" style="font-weight: 900; padding: 5px; cursor: pointer;" onclick="removeRole('<%= allRoles[i] %>')">x</span></span>
                                        <div class="text-center"> 
                                            <% for(action in allActions) { %>
                                                <% if(allActions[action].includes(allRoles[i])) { %>
                                                    <span class="badge badge-pill badge-primary" style="text-align: center"><%= action %> <span id="<%= action %>:-:<%= allRoles[i] %>" class="badge-pill text-warning" style="font-weight: 900; padding: 5px; cursor: pointer;" onclick="toggleWhoCan('<%= action %>', '<%= allRoles[i] %>')"> x </span></span>
                                                <% } else { %>   
                                                    <span class="badge badge-pill badge-primary" style="text-align: center"><%= action %> <span id="<%= action %>:-:<%= allRoles[i] %>" class="badge-pill text-success" style="font-weight: 900; padding: 5px; cursor: pointer;" onclick="toggleWhoCan('<%= action %>', '<%= allRoles[i] %>')"> Add </span></span>
                                                <% } %>
                                            <% } %>
                                            <hr>
                                            <% for(page in allCanSee) { %>
                                                <% if(allCanSee[page].includes(allRoles[i])) { %>
                                                    <span class="badge badge-pill badge-primary" style="text-align: center"><%= page %> <span id="<%= page %>:-:<%= allRoles[i] %>" class="badge-pill text-warning" style="font-weight: 900; padding: 5px; cursor: pointer;" onclick="toggleCanSee('<%= page %>', '<%= allRoles[i] %>')"> x </span></span>
                                                <% } else { %>   
                                                    <span class="badge badge-pill badge-primary" style="text-align: center"><%= page %> <span id="<%= page %>:-:<%= allRoles[i] %>" class="badge-pill text-success" style="font-weight: 900; padding: 5px; cursor: pointer;" onclick="toggleCanSee('<%= page %>', '<%= allRoles[i] %>')"> Add </span></span>
                                                <% } %>
                                            <% } %>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        <% } %>

                        <div onclick="addRole()" class="col-sm-3 m-2" style="cursor: pointer;">
                            <div class="card">
                                <div class="card-body">
                                    <div class="text-center"> 
                                        <span style="font-size: 5rem;">+</span><br>
                                        <span class="card-title badge badge-dark" style="font-size: 1.5em !important;">Add a new role</span>
                                        
                                    </div>
                                </div>
                            </div>
                        </div>
                        </div>
                        
                    <div>
				</section>
                <div class="row mt-4">
                    <div class="col-md-12">
                        <div class="box box-success">
                            <div class="box-header with-border"><h3 class="box-title">Some other settings</h3></div>
                            <div class="box-body">
                                    <div class="form-group notifications">
                                        <h3>
                                            Notifications
                                            <small class="text-muted">The settings for notification panes on Players Table</small>
                                          </h3>
                                            <% for(const [key, value] of Object.entries(notificationSettings)) { %>
                                                <label for="<%= key %>"><%= translate(`dashboard:${key}`) %></label>
                                                <input id="<%= key %>" onchange="toggleDashboardSettings('notifications','<%= key %>')" type="checkbox" name="<%= key %>" <%= value ? 'checked' : '' %> data-style="ios" data-toggle="toggle" data-size="xs" data-on="On" data-off="Off">
                                            <% } %>
                                            </span>
                                    </div>
                                    <div class="form-group updates">
                                        <h3>
                                            Update Content
                                            <small class="text-muted">The settings for updating the table on Players Table</small>
                                          </h3>
                                            <% for(const [key, value] of Object.entries(updatePlayersTable)) { %>
                                            <label for="<%= key %>"><%= translate(`dashboard:${key}`) %></label>
                                            <input id="<%= key %>" onchange="toggleDashboardSettings('updates','<%= key %>')" type="checkbox" name="<%= key %>" <%= value ? 'checked' : '' %> data-style="ios" data-toggle="toggle" data-size="xs" data-on="On" data-off="Off">
                                            <% } %>
                                        </span>
                                    </div>

                                    <!-- <div class="form-group">
                                        <h3>
                                            Plugins
                                            <small class="text-muted">The settings for plugins</small>
                                          </h3>
                                            <label for="nameChecker" class="badge">Name Checker</label>
                                            <input id="nameChecker" onchange="togglePlugin()" name="toggle-test" type="checkbox" data-style="ios" data-toggle="toggle" data-size="xs" data-on="On" data-off="Off" checked>
                                            <label for="squadLeaderChecker" class="badge">SL Experience Checker</label>
                                            <input id="squadLeaderChecker" onchange="togglePlugin()" name="toggle-test" type="checkbox" data-style="ios" data-toggle="toggle" data-size="xs" data-on="On" data-off="Off" checked>
                                            <label for="streamerChecker" class="badge">Streamer Notifier</label>
                                            <input id="streamerChecker" onchange="togglePlugin()" name="toggle-test" type="checkbox" data-style="ios" data-toggle="toggle" data-size="xs" data-on="On" data-off="Off" checked>
                                        </span>
                                    </div> -->
                            </div>
                        </div>
                    </div>
                </div>

                    
                    
                </div>
				
				<!-- Footer includes credits and version -->
			</div>
            <script>
                $(function () {
                    $('.datatable').DataTable({
                        "paging": true,
                        "lengthChange": true,
                        "searching": true,
                        "ordering": true,
                        "info": true,
                        "autoWidth": true,
                        "responsive": true,
                        "columnDefs": [
                            { responsivePriority: 1, targets: 0 },
                            { responsivePriority: 2, targets: -1 }
                        ]
                    });
                    $('.datatable').css('width", "100%')
                });

                async function toggleDashboardSettings(typeSetting, onSetting){
                    if(!onSetting || !typeSetting) return Toast.fire({icon: 'error', title: "Something is fishy", text: "Oops something went wrong!"});
                    await axios.post(`${window.location.origin}/squad-api/dashboard/toggleDashboardSettings`, {
                        onSetting: onSetting,
                        typeSetting: typeSetting
                    }).then(function (response) {
                        if(response.data.status != "ok") return Toast.fire({icon: 'error', title: response.data.message});
                        Toast.fire({icon: 'success', title: response.data.message});
                    }).catch(function (error) {
                        Toast.fire({icon: 'error', title: error});
                    });
                }

                async function toggleRole(userId, role) {
                    if(event.target.id) return;
                    await axios.post(`${window.location.origin}/squad-api/roles/toggleRole`, {
                        userId: userId,
                        role: role
                    }).then(function (response) {
                        if(response.data.status != "ok") return Toast.fire({icon: 'error', title: response.data.message});
                        switch (response.data.message) {
                            case 'REMOVED':
                                Toast.fire({icon: 'info', title: `${role.charAt(0).toUpperCase()+role.slice(1)} has been removed!`});
                                break;
                            case 'ADDED':
                                Toast.fire({icon: 'info', title: `${role.charAt(0).toUpperCase()+role.slice(1)} has been added!`});
                                break;
                            default:
                                Toast.fire({icon: 'error', title: response.data.message});
                                break;
                        }
                    }).catch(function (error) {
                        Toast.fire({icon: 'error', title: error});
                    });
                }

                async function toggleWhoCan(typeAction, role){
                    if(!role || !typeAction) return Toast.fire({icon: 'error', title: "Something is fishy", text: "Oops something went wrong!"});
                    await axios.post(`${window.location.origin}/squad-api/roles/toggleWhoCan`, {
                        typeAction: typeAction,
                        role: role
                    }).then(function (response) {
                        if(response.data.status != "ok") return Toast.fire({icon: 'error', title: response.data.message});
                        Toast.fire({icon: 'success', title: response.data.message});
                        const span = document.getElementById(`${typeAction}:-:${role}`);

                        switch(response.data.message){
                            case "ADDED":
                                span.innerText = " x ";
                                span.classList.add("text-warning");
                                span.classList.remove("text-success");
                                break;
                            case "REMOVED":
                                span.innerText = " Add ";
                                span.classList.add("text-success");
                                span.classList.remove("text-warning");
                                break;
                        }
                        
                        span.classList.remove("text-danger");
                        span.classList.add("text-success");

                    }).catch(function (error) {
                        Toast.fire({icon: 'error', title: error});
                    });
                }

                async function toggleCanSee(page, role){
                    if(!role || !page) return Toast.fire({icon: 'error', title: "Something is fishy", text: "Oops something went wrong!"});
                    await axios.post(`${window.location.origin}/squad-api/roles/toggleCanSee`, {
                        page: page,
                        role: role
                    }).then(function (response) {
                        if(response.data.status != "ok") return Toast.fire({icon: 'error', title: response.data.message});
                        Toast.fire({icon: 'success', title: response.data.message});
                        const span = document.getElementById(`${page}:-:${role}`);

                        switch(response.data.message){
                            case "ADDED":
                                span.innerText = " x ";
                                span.classList.add("text-warning");
                                span.classList.remove("text-success");
                                break;
                            case "REMOVED":
                                span.innerText = " Add ";
                                span.classList.add("text-success");
                                span.classList.remove("text-warning");
                                break;
                        }
                        
                        span.classList.remove("text-danger");
                        span.classList.add("text-success");

                    }).catch(function (error) {
                        Toast.fire({icon: 'error', title: error});
                    });
                }

                async function addRole(){
                    Swal.fire({
                        title: "Add Role",
                        text: "Enter the name of the role you want to add",
                        input: 'text',
                        inputAttributes: {
                            autocapitalize: 'off'
                        },
                        showCancelButton: true,
                        confirmButtonText: 'Add',
                        preConfirm: (role) => {
                            if(!role) return Toast.fire({icon: 'error', title: "Please enter a role name"});
                            return axios.post(`${window.location.origin}/squad-api/roles/addRole`, {
                                role: role
                            }).then(function (response) {
                                if(response.data.status != "ok") return Toast.fire({icon: 'error', title: response.data.message});
                                Toast.fire({icon: 'success', title: response.data.message});
                                window.location.reload();
                            }).catch(function (error) {
                                Toast.fire({icon: 'error', title: error});
                            });
                        }
                    })
                }

                async function removeRole(role){
                    if(!role) return Toast.fire({icon: 'error', title: "Something is fishy", text: "Oops something went wrong!"});
                    await axios.post(`${window.location.origin}/squad-api/roles/removeRole`, {
                        role: role
                    }).then(function (response) {
                        if(response.data.status != "ok") return Toast.fire({icon: 'error', title: response.data.message});
                        Toast.fire({icon: 'success', title: response.data.message});
                        // refresh the page
                        window.location.reload();
                    }).catch(function (error) {
                        Toast.fire({icon: 'error', title: error});
                    });
                }


                // // Show Notifications
                // await axios.post('/squad-api/dashboard/toggleShowNotifications', {
                //     actionType: 'onConnect',
                // })
                // .then(function (response) {
                //     console.log(response);
                // })
                // .catch(function (error) {
                //     console.log(error);
                // });

                // await axios.post('/squad-api/dashboard/toggleShowNotifications', {
                //     actionType: 'onDisconnect',
                // })
                // .then(function (response) {
                //     console.log(response);
                // })
                // .catch(function (error) {
                //     console.log(error);
                // });

                // await axios.post('/squad-api/dashboard/toggleShowNotifications', {
                //     actionType: 'onSquadJoin',
                // })
                // .then(function (response) {
                //     console.log(response);
                // })
                // .catch(function (error) {
                //     console.log(error);
                // });

                // await axios.post('/squad-api/dashboard/toggleShowNotifications', {
                //     actionType: 'onSquadLeave',
                // })
                // .then(function (response) {
                //     console.log(response);
                // })
                // .catch(function (error) {
                //     console.log(error);
                // });

                // await axios.post('/squad-api/dashboard/toggleShowNotifications', {
                //     actionType: 'onSquadUpdate',
                // })
                // .then(function (response) {
                //     console.log(response);
                // })
                // .catch(function (error) {
                //     console.log(error);
                // });

                // await axios.post('/squad-api/dashboard/toggleShowNotifications', {
                //     actionType: 'onAdminRequest',
                // })
                // .then(function (response) {
                //     console.log(response);
                // })
                // .catch(function (error) {
                //     console.log(error);
                // });

                // await axios.post('/squad-api/dashboard/toggleShowNotifications', {
                //     actionType: 'notifyAboutUpdates',
                // })
                // .then(function (response) {
                //     console.log(response);
                // })
                // .catch(function (error) {
                //     console.log(error);
                // });

                // Update Players Table
                // await axios.post('/squad-api/dashboard/toggleUpdatePlayersTable', {
                //     actionType: 'onConnect',
                // })
                // .then(function (response) {
                //     console.log(response);
                // })
                // .catch(function (error) {
                //     console.log(error);
                // });

                // await axios.post('/squad-api/dashboard/toggleUpdatePlayersTable', {
                //     actionType: 'onDisconnect',
                // })
                // .then(function (response) {
                //     console.log(response);
                // })
                // .catch(function (error) {
                //     console.log(error);
                // });

                // await axios.post('/squad-api/dashboard/toggleUpdatePlayersTable', {
                //     actionType: 'onSquadJoin',
                // })
                // .then(function (response) {
                //     console.log(response);
                // })
                // .catch(function (error) {
                //     console.log(error);
                // });

                // await axios.post('/squad-api/dashboard/toggleUpdatePlayersTable', {
                //     actionType: 'onSquadLeave',
                // })
                // .then(function (response) {
                //     console.log(response);
                // })
                // .catch(function (error) {
                //     console.log(error);
                // });

                // await axios.post('/squad-api/dashboard/toggleUpdatePlayersTable', {
                //     actionType: 'onSquadUpdate',
                // })
                // .then(function (response) {
                //     console.log(response);
                // })
                // .catch(function (error) {
                //     console.log(error);
                // });
            </script>
            <!-- /.content-wrapper -->
            
            <%- include('../partials/footer') %>
		<!-- ./wrapper -->
	</body>
    <script>
        async function changeLimit(clanID, clanName)
        {
        Swal.fire({
            title: `${clanName}'s Whitelist Limit`,
            icon: 'question',
            input: 'range',
            inputLabel: 'Limit',
            inputAttributes: {
                min: 1,
                max: 200,
                step: 1
            },
            inputValue: 1,
            }).then(async (result) => {
            if (result.isConfirmed) {
                const newLimit = document.getElementById('swal2-input').value;
                await axios.post(`${window.location.origin}/squad-api/clan/setWhitelistLimit`, {
                    clanID: clanID,
                    limit: newLimit
                }).then((response) => {
                        if (!response.data.status) return Swal.fire(`Error`, `Error while getting response.`, `error`);
                        if (response.data.status === "ok") {
                            Toast.fire({
                                icon: 'success',
                                title: 'Limit Set!'
                            })
                            const tr = document.getElementById(clanID);
                            tr.cells[2].innerHTML = newLimit;
                        }
                        if (response.data.status === "nok") {
                            Swal.fire(`There was an error`, `We couldn't set the limit. Please try again later.`, `error`);
                        }
                        if (response.data.status === "nok2") {
                            Swal.fire(`Insufficent Permissions`, `We couldn't perform your requested action. You don't have the right role to perform this action.`, `warning`);
                        }
                    })
                    .catch((error) => {
                        return Swal.fire(`Error`, `Error: ${error}`, `error`);
                    });
                }
            })
        }

        async function disbandSquad(clanID){
            Swal.fire({
            title: `Are you sure you want to disband this squad?`,
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, disband it!',
            allowOutsideClick: () => !Swal.isLoading(),
            }).then(async (result) => {
            if (result.isConfirmed) {
                await axios.post(`${window.location.origin}/squad-api/clan/disabandClan`, {
                    clanID: clanID
                }).then((response) => {
                        if (!response.data.status) return Swal.fire(`Error`, `Error while getting response.`, `error`);
                        if (response.data.status === "ok") {
                            Toast.fire({
                                icon: 'success',
                                title: 'Squad has been disband'
                            })
                            const tr = document.getElementById(clanID);
                            tr.parentNode.removeChild(tr);

                        }
                        if (response.data.status === "nok2") {
                            Swal.fire(`Insufficent Permissions`, `We couldn't perform your requested action. You don't have the right role to perform this action.`, `warning`);
                        }
                    })
                    .catch((error) => {
                        return Swal.fire(`Error`, `Error: ${error}`, `error`);
                    });
            }
            })
        }
    </script>
</html>