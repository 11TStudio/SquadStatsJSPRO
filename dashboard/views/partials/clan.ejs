<script>

$(document).ready(function () {
        $('.datatable').DataTable({
            bAutoWidth: true,
            aoColumns: [{ sWidth: "1%", }, { sWidth: "1%" }, { sWidth: "1%" }, { sWidth: "1%" }],
            "scrollCollapse": true,
            "info": true,
            "paging": true
        });
    });

    const clanLimit = "<%- clanWhiteLimit %>";
    let amountWhite = "<%- clanWhitelisted %>";

    async function leaveClan(steamID, clanID) {
        await Swal.fire({
            title: 'Leaving Clan',
            input: 'checkbox',
            inputValue: 0,
            inputPlaceholder:
                'I\'m sure',
            confirmButtonText:
                'Continue <i class="fa fa-arrow-right"></i>',
            inputValidator: (result) => {
                return !result && 'You need to check the box'
            }
        }).then(async (result) => {
            if (result.isConfirmed) {   
                await axios.post(`${window.location.origin}/squad-api/clan/leaveClan`, {
                    steamID: steamID,
                    clanID: clanID
                }).then(function (response) {
                    if (!response.data.status) return Swal.fire(`Error`, `Error while getting response.`, `error`);
                    if (response.data.status === "ok") {
                        Toast.fire({
                            icon: 'success',
                            title: 'You\'ve left your clan!'
                        })
                        window.location.href = `${window.location.origin}/clans`;
                    }
                }).catch(function (error) {
                    Toast.fire({ icon: 'error', title: error });
                });
            }
        });
    }


        async function giveWhitelistToUser(steamID) {
            if (!steamID) return console.log("no SteamID");
            if (clanLimit < (amountWhite + 1)) return Toast.fire({ icon: 'error', title: 'You can\'t whitelist more players, limit reached!' });
            await axios.post(`${window.location.origin}/squad-api/whitelist/clan/addUserWhitelist`, {
                steamID: steamID
            }).then((response) => {
                if (!response.data.status) return Swal.fire(`Error`, `Error while getting response.`, `error`);
                if (response.data.status === "ok") {
                    Toast.fire({
                        icon: 'success',
                        title: 'Whitelist added!'
                    });
                    location.reload();
                    // remove the active class from the button inside the div role, and where permission matches exactly with the content of the button
                }
                if (response.data.status === "nok") {
                    Swal.fire(`There was an error`, response.data.message, `error`);
                }
            })
                .catch((error) => {
                    return Swal.fire(`Error`, `${error}`, `error`);
                });
        }
        async function removeWhitelistFromUser(steamID) {
            if (!steamID) return console.log("no SteamID");
            if (clanLimit < (amountWhite - 1)) return console.log("Limit Reached");

            await axios.post(`${window.location.origin}/squad-api/whitelist/clan/removeUserWhitelist`, {
                steamID: steamID
            }).then((response) => {
                if (!response.data.status) return Swal.fire(`Error`, `Error while getting response.`, `error`);
                if (response.data.status === "ok") {
                    Toast.fire({
                        icon: 'success',
                        title: 'Whitelist removed!'
                    });
                    location.reload();
                    // remove the active class from the button inside the div role, and where permission matches exactly with the content of the button
                }
                if (response.data.status === "nok") {
                    Swal.fire(`There was an error`, response.data.message, `error`);
                }
            })
                .catch((error) => {
                    return Swal.fire(`Error`, `${error}`, `error`);
                });
        }

        async function showAllOpenApplications(clanID) {
            await Swal.fire({
                icon: 'question',
                title: 'Current Applications:',
                showConfirmButton: true,
                confirmButtonText: "Close",
                showCancelButton: true,
                denyButtonText: `Cancel`,
                width: 900,
                html:
                    `
                        <div class='container mx-auto text-center'>
                            <div id='current-apps' class='d-block mx-auto text-center'> </div>
                            <div id='buttons'> </div>                            
                        </div>`,
                didOpen: async () => {
                    const divApps = document.getElementById('current-apps');
                    const table = document.createElement('div');
                    const buttons = document.getElementById('buttons')
                    const butDiv = document.createElement('div');
                    table.innerHTML = `
                                    <div class='mx-auto text-center'>
                                        <table id="datatable" class="table datatable">
                                                <thead>
                                                    <tr>
                                                        <th>SteamID</th>
                                                        <th>Play Hour</th>
                                                        <th>Previous Clan</th>
                                                        <th>Actions</th>
                                                    </tr>
                                                </thead>
                                                <tbody id='elements'></tbody>
                                            </table>
                                        </div>
                                    </div>
                                `;
                    divApps.append(table);
                    await axios.post(`${window.location.origin}/squad-api/clan/getApplications`, {
                        clanID: clanID,
                    }).then((response) => {
                        if (!response.data.status) return Swal.fire(`Error`, `Error while getting response.`, `error`);
                        if (response.data.status === "ok") {
                            const apps = response.data.content;
                            for (const user in apps) {
                                const divApp = document.createElement('tr');
                                const elements = document.getElementById('elements')
                                divApp.innerHTML = `
                                            <td>
                                                ${apps[user].steamID} 
                                            </td>               
                                            <td>
                                                ${apps[user].playHour} 
                                            </td>    
                                            <td>
                                                ${apps[user].oldClan ? apps[user].oldClan : "None"} 
                                            </td>                      
                                            <td>
                                                <button onclick="showDetails('${apps[user].steamID}', '${clanID}')" class="btn btn-outline-primary badge rounded-pill active">Details</button>
                                                <button onclick="acceptClanApplication('${apps[user].steamID}', '${clanID}')" class="btn btn-outline-success badge rounded-pill active">Accept</button>
                                                <button onclick="rejectClanApplication('${apps[user].steamID}', '${clanID}')" class="btn btn-outline-danger badge rounded-pill active">Reject</button>
                                            </td>
                                            `;
                                elements.append(divApp);
                            }
                        }
                        if (response.data.status === "nok") {
                            Swal.fire(`There was an error`, response.data.message, `error`);
                        }
                    })
                }
            })
        }

        async function giveManager(steamID) {
            await axios.post(`${window.location.origin}/squad-api/roles/toggleRole`, {
                userId: steamID,
                role: "clan manager",
            }).then(function (response) {
                if (response.data.status != "ok") return Toast.fire({ icon: 'error', title: response.data.message });
                switch (response.data.message) {
                    case 'REMOVED':
                        Toast.fire({ icon: 'info', title: `Clan Manager removed!` });
                        break;
                    case 'ADDED':
                        Toast.fire({ icon: 'info', title: `Clan Manager added!` });
                        break;
                    default:
                        Toast.fire({ icon: 'error', title: response.data.message });
                        break;
                }
                location.reload();
            }).catch(function (error) {
                Toast.fire({ icon: 'error', title: error });
            });
        }
        async function kickMember(steamID) {
            await axios.post(`${window.location.origin}/squad-api/clan/kickFromClan`, {
                steamID: steamID
            }).then(function (response) {
                if (response.data.status != "ok") return Toast.fire({ icon: 'error', title: response.data.message });
                else {
                    Toast.fire({
                        icon: 'success',
                        title: 'Member Kicked!'
                    });
                    location.reload();
                }
            }).catch(function (error) {
                Toast.fire({ icon: 'error', title: error });
            });
        }

        async function acceptClanApplication(steamID, clanID) {
            await axios.post(`${window.location.origin}/squad-api/clan/acceptApplications`, {
                clanID: clanID,
                steamID: steamID
            }).then((response) => {
                if (!response.data.status) return Swal.fire(`Error`, `Error while getting response.`, `error`);
                if (response.data.status === "ok") {
                    Toast.fire({
                        icon: 'success',
                        title: 'App Accepted!'
                    });
                    location.reload();
                }
                if (response.data.status === "nok") {
                    Swal.fire(`There was an error`, response.data.message, `error`);
                }
            })
        }
        async function rejectClanApplication(steamID, clanID) {
            await axios.post(`${window.location.origin}/squad-api/clan/rejectApplications`, {
                clanID: clanID,
                steamID: steamID
            }).then((response) => {
                if (!response.data.status) return Swal.fire(`Error`, `Error while getting response.`, `error`);
                if (response.data.status === "ok") {
                    Toast.fire({
                        icon: 'success',
                        title: 'App Rejected!'
                    });
                    location.reload();
                }
                if (response.data.status === "nok") {
                    Swal.fire(`There was an error`, response.data.message, `error`);
                }
            })
        }

        async function showDetails(steamID, clanID) {
            await axios.post(`${window.location.origin}/squad-api/clan/getApplications`, {
                clanID: clanID,
                steamID: steamID
            }).then( async (response) => {
                if (!response.data.status) return Swal.fire(`Error`, `Error while getting response.`, `error`);
                if (response.data.status === "ok") {
                    await Swal.fire({
                        title: 'Details',
                        html: `
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="card">
                                        <div class="card-body">
                                            <div class="row">
                                                <div class="col-md-12">
                                                    <div class="form-group">
                                                        <label>SteamID</label>
                                                        <input type="text" class="form-control" value="${response.data.content[0].steamID}" disabled>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="row">
                                                <div class="col-md-12">
                                                    <div class="form-group">
                                                        <label>Play Hour</label>
                                                        <input type="text" class="form-control" value="${response.data.content[0].playHour}" disabled>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="row">
                                                <div class="col-md-12">
                                                    <div class="form-group">
                                                        <label>Previous Clan</label>
                                                        <input type="text" class="form-control" value="${response.data.content[0].oldClan}" disabled>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        `,
                        showCloseButton: true,
                        showCancelButton: true,
                        cancelButtonText: 'Close',
                        confirmButtonText: 'Accept',
                        confirmButtonColor: '#00a8ff',
                        cancelButtonColor: '#00a8ff',
                        showLoaderOnConfirm: true,
                        preConfirm: async () => {
                            await acceptClanApplication(steamID, clanID);
                        }
                    })
                }}).catch(function (error) {
                    Toast.fire({ icon: 'error', title: error });
                });
        }

        async function toggleRecruitStatus(clanID){
            await axios.post(`${window.location.origin}/squad-api/clan/toggleRecruitStatus`, {
                clanID: clanID
            }).then( async (response) => {
                if (!response.data.status) return Swal.fire(`Error`, `Error while getting response.`, `error`);
                if (response.data.status === "ok") {
                    await Toast.fire({
                        icon: 'info',
                        title: response.data.message,
                    })
                } else {
                    await Toast.fire({
                        icon: 'error',
                        title: response.data.message,
                    })
                }
            }).catch(function (error) {
                    Toast.fire({ icon: 'error', title: error });
                });
        }

</script>