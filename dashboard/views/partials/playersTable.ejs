<script>
    let delay = 2000;
    const regexTeam = /^Team ID:.(\d{1}).\((.*)\)$/gi;
    const regexPlayer = /^ID:.(\d).{3}Name:.(.*).{3}Size:.(\d).{3}Locked:.(.*).{3}Creator Name:.(.*).{3}Creator Steam ID:.(.*)$/gi;

    const totPlayers = document.createElement("span");
    totPlayers.classList.add("h2","font-weight-bold", "mb-0");
    totPlayers.innerHTML = `/100`;

    function addNewLines(str) { 
        return str.replace(/(?!$|\n)([^\n]{19}(?!\n))/g, '$1<br>');
    }

    // let lastClick = 0;
    async function updatePlayers(option = 3) {
        // simple spam prevention
        // if (lastClick >= (Date.now() - delay))
        //     return;
        // lastClick = Date.now();
        await socket.emit("players", async (players) => {
            const headerTitle2 = document.getElementById("headerTitle2");
            const headerDesc2 = document.getElementById("headerDesc2");
            const headerIcon2 = document.getElementById("headerIcon2");
            headerTitle2.innerHTML = "Players Amount";
            headerIcon2.className = "fas fa-users";
            headerDesc2.innerHTML = players.length;
            headerDesc2.parentNode.insertBefore(totPlayers, headerDesc2.nextSibling);
            const team1 = {
                id: null,
                name: null,
                players: []
            };
            const team2 = {
                id: null,
                name: null,
                players: []
            };
            for (let i = 0; i < players.length; i++) {
                if (players[i].teamID == 1) {
                    team1.players.push(players[i]);
                } else {
                    team2.players.push(players[i]);
                }
            }
            // DONE: Print first all players with a squad
            // TODO: Print after that all players without a squad!
            // TODO: Print also the disconnected players!

            async function createTable1() {
                let table = document.getElementById("team1_players");
                table.innerHTML = '';
                let thead = document.createElement("thead");
                table.appendChild(thead);
                let title = document.createElement("tr");
                title.innerHTML =   `<th scope="col">Player</th>
                                    <th scope="col">ðŸ”’/ðŸ”“</th>
                                    <th scope="col">#ðŸ‘¥</th>
                                    <th scope="col">Squad</th>
                                    <th scope="col">Actions</th>`;
                thead.appendChild(title);
                let tbody = document.createElement("tbody");
                table.appendChild(tbody);
                team1.players.forEach(async player => {
                    let row = document.createElement("tr");
                    row.id = `${player?.steamID}`;
                    if(player.squadID){
                        row.innerHTML = `<td class="name font-weight-bold">${addNewLines(player.name)}<br><span class="badge bg-warning text-dark player-toggle="tooltip" player-placement="top" title="${player.possessClassname || "No Role Selected Yet"}" "><span id="${player.playerID}"></span>${player.steamID}</span></td>
                                        <td><span ${player.squadID ? 'id='+(player.squadID + player.squad.teamID) : ""}>${player.squad?.locked !== "False" ? "<span class='badge bg-danger text-dark'><span style='font-size: 0.1px'>locked</span>ðŸ”’</span></td>" : player.squadID ? "<span class='badge bg-success text-dark'><span style='font-size: 0.1px'>unlocked</span>ðŸ”“</span></td>" : "<td><span class='badge bg-danger text-dark'>not in squad</span></td>"}<td><span class="badge bg-secondary text-dark">${player.squad?.size ? "ðŸ‘¥ " + player.squad?.size : "" }</span></td><td><span class="badge bg-primary text-dark">${addNewLines(player.squad?.squadName) || "<span class='badge bg-danger text-dark'>not in squad</span>"}</span></td>
                                        <td class="squadName"><button class="badge btn btn-secondary" id="settings${player.steamID}" aria-describedby="Actions">Actions</button></td>
                                        `;
                    } else {
                        row.innerHTML = `<td class="name font-weight-bold">${addNewLines(player.name)}<br><span class="badge bg-warning text-dark player-toggle="tooltip" player-placement="top" title="${player.possessClassname || "No Role Selected Yet"}" "><span id="${player.playerID}"></span>${player.steamID}</span></td>
                                        <td></td><td></td><td><span class='badge bg-danger text-dark'>not in squad</span></td>
                                        <td class="squadName"><button class="badge btn btn-secondary" id="settings${player.steamID}" aria-describedby="Actions">Actions</button></td>
                                        `;
                    }


                    await tbody.appendChild(row);
                    tippy(document.getElementById(`settings${player.steamID}`), {
                        content: `
                        <button style="font-size: 10px !important;" type="button" class="badge btn btn-secondary" onclick="warn('${player.steamID}')">Warn</button>
                        <button style="font-size: 10px !important;" type="button" class="badge btn btn-warning" onclick="kick('${player.steamID}')">Kick</button>
                        <button style="font-size: 10px !important;" type="button" class="badge btn btn-danger" onclick="ban('${player.steamID}')">Ban</button>
                        ${player.squadID ? `<button style="font-size: 10px !important;" type="button" class="badge btn btn-primary" onclick="disbandSquad('2', '${player.squadID}')">Disband the Squad</button>` : ''}
                        ${player.squadID ? `<button style="font-size: 10px !important;" type="button" class="badge btn btn-info" onclick="removeFromSquad('${player.steamID}')">Kick From Squad</button>` : ''}
                        `,
                        allowHTML: true,
                        zIndex: 1,
                        maxWidth: 'none',
                        trigger: 'click',
                        interactive: true,
                    });

                });
            }

            async function createTable2() {
                let table2 = document.getElementById("team2_players");
                table2.innerHTML = '';
                let thead = document.createElement("thead");
                table2.appendChild(thead);
                let title = document.createElement("tr");
                title.innerHTML =   `<th scope="col">Player</th>
                                    <th scope="col">ðŸ”’/ðŸ”“</th>
                                    <th scope="col">#ðŸ‘¥</th>
                                    <th scope="col">Squad</th>
                                    <th scope="col">Actions</th>`;
                thead.appendChild(title);
                let tbody2 = document.createElement("tbody");
                table2.appendChild(tbody2);
                team2.players.forEach(player => {
                    let row = document.createElement("tr");
                    row.id = `${player?.steamID}`;
                    if(player.squadID){
                        row.innerHTML = `<td class="name font-weight-bold">${addNewLines(player.name)}<br><span class="badge bg-warning text-dark player-toggle="tooltip" player-placement="top" title="${player.possessClassname || "No Role Selected Yet"}" "><span id="${player.playerID}"></span>${player.steamID}</span></td>
                                        <td><span ${player.squadID ? 'id='+(player.squadID + player.squad.teamID) : ""}>${player.squad?.locked !== "False" ? "<span class='badge bg-danger text-dark'><span style='font-size: 0.1px'>locked</span>ðŸ”’</span></td>" : player.squadID ? "<span class='badge bg-success text-dark'><span style='font-size: 0.1px'>unlocked</span>ðŸ”“</span></td>" : "<td><span class='badge bg-danger text-dark'>not in squad</span></td>"}<td><span class="badge bg-secondary text-dark">${player.squad?.size ? "ðŸ‘¥ " + player.squad?.size : "" }</span></td><td><span class="badge bg-primary text-dark">${addNewLines(player.squad?.squadName) || ""}</span></td>                                
                                        <td class="squadName"><button class="badge btn btn-secondary" id="settings${player.steamID}" aria-describedby="Actions">Actions</button></td>
                                        `;
                    } else {
                        row.innerHTML = `<td class="name font-weight-bold">${addNewLines(player.name)}<br><span class="badge bg-warning text-dark player-toggle="tooltip" player-placement="top" title="${player.possessClassname || "No Role Selected Yet"}" "><span id="${player.playerID}"></span>${player.steamID}</span></td>
                                        <td></td><td></td><td><span class='badge bg-danger text-dark'>not in squad</span></td>
                                        <td class="squadName"><button class="badge btn btn-secondary" id="settings${player.steamID}" aria-describedby="Actions">Actions</button></td>
                                        `;
                    }
                    tbody2.appendChild(row);
                    tippy(document.getElementById(`settings${player.steamID}`), {
                        theme: 'leventhan',
                        content: `
                        <button style="font-size: 10px !important;" type="button" class="badge btn btn-secondary" onclick="warn('${player.steamID}')">Warn</button>
                        <button style="font-size: 10px !important;" type="button" class="badge btn btn-warning" onclick="kick('${player.steamID}')">Kick</button>
                        <button style="font-size: 10px !important;" type="button" class="badge btn btn-danger" onclick="ban('${player.steamID}')">Ban</button>
                        ${player.squadID ? `<button style="font-size: 10px !important;" type="button" class="badge btn btn-primary" onclick="disbandSquad('2', '${player.squadID}')">Disband the Squad</button>` : ''}
                        ${player.squadID ? `<button style="font-size: 10px !important;" type="button" class="badge btn btn-info" onclick="removeFromSquad('${player.steamID}')">Kick From Squad</button>` : ''}`,
                        allowHTML: true,
                        zIndex: 1,
                        maxWidth: 'none',
                        trigger: 'click',
                        interactive: true,
                    });
                });
            }
            
            await createTable1();
            await createTable2();
            await filterTable1();
            await filterTable2();
        });
    }

    async function addPlayer(data) {
        const headerDesc2 = document.getElementById("headerDesc2");
        headerDesc2.innerHTML = parseInt(headerDesc2.innerHTML) + 1;
        let table;
        let row = document.createElement("tr");
        switch(data.player?.teamID) {
            case "1":
                table = document.getElementById("team1_players");
                break;
            case "2":
                table = document.getElementById("team2_players");
        }
        if(!table) return;
        row.id=data.player?.steamID;
        if(data.squadID){
            row.innerHTML = `<td class="name font-weight-bold">${addNewLines(data.name)}<br><span class="badge bg-warning text-dark data-toggle="tooltip" data-placement="top" title="${data.possessClassname || "No Role Selected Yet"}" "><span id="${data.dataID}"></span>${data.steamID}</span></td>
                            <td><span ${data.squadID ? 'id='+(data.squadID + data.squad.teamID) : ""}>${data.squad?.locked !== "False" ? "<span class='badge bg-danger text-dark'><span style='font-size: 0.1px'>locked</span>ðŸ”’</span></td>" : data.squadID ? "<span class='badge bg-success text-dark'><span style='font-size: 0.1px'>unlocked</span>ðŸ”“</span></td>" : "<td><span class='badge bg-danger text-dark'>not in squad</span></td>"}<td><span class="badge bg-secondary text-dark">${data.squad?.size ? "ðŸ‘¥ " + data.squad?.size : "" }</span></td><td><span class="badge bg-primary text-dark">${addNewLines(data.squad?.squadName)}</span></td>
                            <td class="squadName"><button class="badge btn btn-secondary" id="settings${data.steamID}" aria-describedby="Actions">Actions</button></td>
                            `;
        } else {
            row.innerHTML = `<td class="name font-weight-bold">${addNewLines(data.name)}<br><span class="badge bg-warning text-dark data-toggle="tooltip" data-placement="top" title="${data.possessClassname || "No Role Selected Yet"}" "><span id="${data.dataID}"></span>${data.steamID}</span></td>
                            <td></td><td></td><td><span class='badge bg-danger text-dark'>not in squad</span></td>
                            <td class="squadName"><button class="badge btn btn-secondary" id="settings${data.steamID}" aria-describedby="Actions">Actions</button></td>
                            `;
        }
        table.appendChild(row);
        tippy(document.getElementById(`settings${data.player?.steamID}`), {
            theme: 'leventhan',
            content: `
            <button style="font-size: 10px !important;" type="button" class="badge btn btn-secondary" onclick="warn('${data.steamID}')">Warn</button>
            <button style="font-size: 10px !important;" type="button" class="badge btn btn-warning" onclick="kick('${data.steamID}')">Kick</button>
            <button style="font-size: 10px !important;" type="button" class="badge btn btn-danger" onclick="ban('${data.steamID}')">Ban</button>
            ${data.squadID ? `<button style="font-size: 10px !important;" type="button" class="badge btn btn-primary" onclick="disbandSquad('2', '${data.squadID}')">Disband the Squad</button>` : ''}
            ${data.squadID ? `<button style="font-size: 10px !important;" type="button" class="badge btn btn-info" onclick="removeFromSquad('${data.steamID}')">Kick From Squad</button>` : ''}`,
            allowHTML: true,
            zIndex: 1,
            maxWidth: 'none',
            trigger: 'click',
            interactive: true,
        });
        switch(data.player?.teamID) {
            case "1":
                filterTable1();
                break;
            case "2":
                filterTable2();
        }

    }

    async function removePlayer(data) {
        const headerDesc2 = document.getElementById("headerDesc2");
        headerDesc2.innerHTML = parseInt(headerDesc2.innerHTML) - 1;
        let table;
        let rows;
        switch(data.player?.teamID) {
            case "1":
                table = document.getElementById("team1_players");
                rows = document.querySelectorAll("#team1_players tr");
                break;
            case "2":
                table = document.getElementById("team2_players");
                rows = document.querySelectorAll("#team2_players tr");
        }
        if(!table) return updatePlayers();
        rows.forEach((row) => {
            if(row.id === data.player?.steamID) {
                row.remove();
            }
        })
        switch(data.player?.teamID) {
            case "1":
                filterTable1();
                break;
            case "2":
                filterTable2();
        }
    }

    function filterTable1() {
        $('#team1_players').DataTable( {
            destroy: true,
            bAutoWidth: false,
            aoColumns: [ { sWidth: "1%",  },  { sWidth: "1%" },  { sWidth: "1%" }, { sWidth: "1%" }, { sWidth: "1%" } ],
            
            "scrollCollapse": true,
            "info":           false,
            "paging":         false
        } );
    }

    function filterTable2() {
        $('#team2_players').DataTable( {
            destroy: true,
            bAutoWidth: false,
            aoColumns: [ { sWidth: "1%",  },  { sWidth: "1%" },  { sWidth: "1%" }, { sWidth: "1%" }, { sWidth: "1%" } ],
            
            "scrollCollapse": true,
            "info":           false,
            "paging":         false
        } );
    }


    updatePlayers();

    socket.emit("rcon.execute","ListSquads", async (res) => {
        const rows = res.split("\n");
        for (let i = 0; i < rows.length; i++) {
            while ((m = regexTeam.exec(rows[i])) !== null) {
                // This is necessary to avoid infinite loops with zero-width matches
                if (m.index === regexTeam.lastIndex) {
                    regexTeam.lastIndex++;
                }
                if(m[1] == 1) {
                    document.getElementById("team1").innerHTML = m[2];
                } else {
                    document.getElementById("team2").innerHTML = m[2];
                }
                
            }

            // check if the row is regexPlayer
            while ((m = regexPlayer.exec(rows[i])) !== null) {
                // This is necessary to avoid infinite loops with zero-width matches
                if (m.index === regexPlayer.lastIndex) {
                    regexPlayer.lastIndex++;
                }
                console.log(m);
                const tr = document.getElementById(m[6]);
                if(tr) {
                    // get the first td and set the text to the name
                    tr.getElementsByTagName("td")[3].innerHTML += `<br><i class="fas fa-crown"> Squad Creator</i>`;
                }
            }
        }
    });
</script>
