<script>
    const pathname = window.location.pathname;
    async function togglePermissionToRole(role, permission) {
        let button = $('#' + role + ' button:contains("' + permission + '")').filter(function () {
            return $(this).text() === permission;
        });
        // check if the button is active
        if (button.hasClass('active')) {
            // remove the permission from the role
            await axios.post(`${window.location.origin}/squad-api/whitelist/roles/removePermission`, {
                role: role,
                permission: permission
            })
                .then((response) => {
                    if (!response.data.status) return Swal.fire(`Error`, `Error while getting response.`, `error`);
                    if (response.data.status === "ok") {
                        Toast.fire({
                            icon: 'success',
                            title: 'Permission removed!'
                        })
                        // remove the active class from the button inside the div role, and where permission matches exactly with the content of the button
                        button.removeClass('active');
                    }
                    if (response.data.status === "nok") {
                        Swal.fire(`There was an error`, response.data.message, `error`);
                    }
                })
                .catch((error) => {
                    return Swal.fire(`Error`, `${error}`, `error`);
                });
        } else {
            await axios.post(`${window.location.origin}/squad-api/whitelist/roles/addPermission`, {
                role: role,
                permission: permission
            })
                .then((response) => {
                    if (!response.data.status) return Swal.fire(`Error`, `Error while getting response.`, `error`);
                    if (response.data.status === "ok") {
                        Toast.fire({
                            icon: 'success',
                            title: 'Permission added to the role!'
                        })
                        button.addClass('active');

                    }
                    if (response.data.status === "nok") {
                        Swal.fire(`There was an error`, response.data.message, `error`);
                    }
                })
                .catch((error) => {
                    return Swal.fire(`Error`, `${error}`, `error`);
                });
        }
    }

    async function removeGroup(role) {
        await axios.post(`${window.location.origin}/squad-api/whitelist/removeGroup`, {
            group: role
        })
            .then((response) => {
                if (!response.data.status) return Swal.fire(`Error`, `Error while getting response.`, `error`);
                if (response.data.status === "ok") {
                    Toast.fire({
                        icon: 'success',
                        title: 'Group removed!'
                    })
                    // remove the attributes with class "role"
                    $(`.${role}`).remove();
                    $(`#${role}`).remove();
                }
                if (response.data.status === "nok") {
                    Swal.fire(`There was an error`, response.data.message, `error`);
                }
            })
            .catch((error) => {
                return Swal.fire(`Error`, `${error}`, `error`);
            });
    }

    let usersTable;
    // When loading the page, the datatable is created
    $(document).ready(() => {
        usersTable = $('#datatable').DataTable({
            "order": [[0, "desc"]],
            destroy: true,
            bAutoWidth: false,
            "scrollCollapse": true,
            "info": false,
            "paging": true,
        });
    });

    let Showing = false;
    let eye = document.getElementById("eyeURL");


    async function removeWhitelist(steamID) {
        Swal.fire({
            title: 'Reason of removal:',
            input: 'text',
            inputAttributes: {
                autocapitalize: 'off'
            },
            showCancelButton: true,
            confirmButtonText: 'Remove',
            allowOutsideClick: () => !Swal.isLoading()
        }).then(async (result) => {
            if (result.isConfirmed) {
                await axios.post(`${window.location.origin}/squad-api/whitelist/removeUserWhitelist`, {
                    steamUID: steamID,
                    reason: result.value
                })
                    .then((response) => {
                        if (!response.data.status) return Swal.fire(`Error`, `Error while getting response.`, `error`);
                        if (response.data.status === "ok") {
                            Toast.fire({
                                icon: 'success',
                                title: 'Player has been removed.'
                            })
                            // Remove the row and refresh the datatable
                            usersTable.row(document.getElementById(steamID)).remove().draw();
                        }
                        if (response.data.status === "nok") {
                            Swal.fire(`There was an error`, response.data.message, `error`);
                        }
                    })
                    .catch((error) => {
                        return Swal.fire(`Error`, `Error: ${error}`, `error`);
                    });
            }
        })
    }

    async function removeBan(steamID, endDate) {
        Swal.fire({
            title: 'Reason of removal:',
            input: 'text',
            inputAttributes: {
                autocapitalize: 'off'
            },
            showCancelButton: true,
            confirmButtonText: 'Remove',
            allowOutsideClick: () => !Swal.isLoading()
        }).then(async (result) => {
            if (result.isConfirmed) {
                await axios.post(`${window.location.origin}/squad-api/banlist/removeUserBanlist`, {
                    steamUID: steamID,
                    reason: result.value,
                    endDate: endDate
                })
                    .then(async (response) => {
                        if (!response.data.status) return Swal.fire(`Error`, `Error while getting response.`, `error`);
                        if (response.data.status === "ok") {
                            Toast.fire({
                                icon: 'success',
                                title: 'Ban is modified.'
                            })
                            let status = document.getElementById(steamID);
                            status.cells[0].innerText = "ðŸ”´ Expired";
                            status.cells[5].innerHTML = "";
                            await usersTable.row(document.getElementById(steamID)).draw();
                        }
                        if (response.data.status === "nok") {
                            Swal.fire(`There was an error`, response.data.message, `error`);
                        }
                    }).catch((error) => {
                        return Swal.fire(`Error`, `Error: ${error}`, `error`);
                    });
            }
        })
    }
    async function getListURL() {
        if (Showing) {
            // remove fa-eye from it
            eye.classList.remove("fa-eye");
            // add fa-eye-slash to it
            eye.classList.add("fa-eye-slash");
            $('#urlTolist').text('*****************************************************');
            Showing = false;
            return Toast.fire({
                icon: 'warning',
                title: 'URL is hidden.'
            })
        }
        if (pathname == "/roles") {
            await axios.get(`${window.location.origin}/squad-api/url`)
                .then((response) => {
                    if (!response.data.status) return Swal.fire(`Error`, `Error while getting response.`, `error`);
                    if (response.data.status === "ok") {
                        Toast.fire({
                            icon: 'success',
                            title: 'URL is not hidden anymore.'
                        })
                        $("#urlTolist").text(`${window.location.origin}/squad-api/whitelist/${response.data.token}`);
                        // remove fa-eye-slash from it
                        eye.classList.remove("fa-eye-slash");
                        // add fa-eye to it
                        eye.classList.add("fa-eye");
                        return Showing = true;
                    }
                    if (response.data.status === "nok") {
                        Swal.fire(`There was an error`, response.data.message, `error`);
                    }
                })
                .catch((error) => {
                    return Swal.fire(`Error`, `Error: ${error}`, `error`);
                });
        }
        if (pathname == "/bans") {
            await axios.get(`${window.location.origin}/squad-api/url`)
                .then((response) => {
                    if (!response.data.status) return Swal.fire(`Error`, `Error while getting response.`, `error`);
                    if (response.data.status === "ok") {
                        Toast.fire({
                            icon: 'success',
                            title: 'URL is not hidden anymore.'
                        })
                        $("#urlTolist").text(`${window.location.origin}/squad-api/banlist/${response.data.token}`);
                        // remove fa-eye-slash from it
                        eye.classList.remove("fa-eye-slash");
                        // add fa-eye to it
                        eye.classList.add("fa-eye");
                        return Showing = true;
                    }
                    if (response.data.status === "nok") {
                        Swal.fire(`There was an error`, response.data.message, `error`);
                    }
                })
                .catch((error) => {
                    return Swal.fire(`Error`, `Error: ${error}`, `error`);
                });
        }
    }

    async function regenToken() {
        if (pathname == "/roles") {
            await axios.get(`${window.location.origin}/squad-api/url/regenerate`)
                .then((response) => {
                    if (!response.data.status) return Swal.fire(`Error`, `Error while getting response.`, `error`);
                    if (response.data.status === "ok") {
                        Toast.fire({
                            icon: 'success',
                            title: 'Token is regenerated.'
                        })
                        $("#urlTolist").text(`${window.location.origin}/squad-api/whitelist/${response.data.token}`);
                        // remove fa-eye-slash from it
                        eye.classList.remove("fa-eye-slash");
                        // add fa-eye to it
                        eye.classList.add("fa-eye");
                        return Showing = true;
                    }
                    if (response.data.status === "nok") {
                        Swal.fire(`There was an error`, response.data.message, `error`);
                    }
                })
                .catch((error) => {
                    return Swal.fire(`Error`, `Error: ${error}`, `error`);
                });
        }
        if (pathname == "/bans") {
            await axios.get(`${window.location.origin}/squad-api/url/regenerate`)
                .then((response) => {
                    if (!response.data.status) return Swal.fire(`Error`, `Error while getting response.`, `error`);
                    if (response.data.status === "ok") {
                        Toast.fire({
                            icon: 'success',
                            title: 'Token is regenerated.'
                        })
                        $("#urlTolist").text(`${window.location.origin}/squad-api/banlist/${response.data.token}`);
                        // remove fa-eye-slash from it
                        eye.classList.remove("fa-eye-slash");
                        // add fa-eye to it
                        eye.classList.add("fa-eye");
                        return Showing = true;
                    }
                    if (response.data.status === "nok") {
                        Swal.fire(`There was an error`, response.data.message, `error`);
                    }
                })
                .catch((error) => {
                    return Swal.fire(`Error`, `Error: ${error}`, `error`);
                });
        }
    }

    async function banPlayer() {
        const selection = document.getElementById('selection');
        const type = selection.options[selection.selectedIndex].id;
        const reason = document.getElementById('reason').value;
        const length = document.getElementById('banLength').value;
        const bannedSteamID = document.getElementById('steamID').value;
        
        let banTime = `${length}${type}`;
        if (!reason) return Swal.fire(`Error`, `Reason cannot be empty.`, `error`);
        if (!bannedSteamID) return Swal.fire(`Error`, `Fill in the Steam64ID, it cannot be empty.`, `error`);
        if (!length && type !== "P") return Swal.fire(`Error`, `Ban Length cannot be empty`, `error`);
        await axios.post(`${window.location.origin}/squad-api/ban`, {
            steamUID: bannedSteamID,
            reason: reason,
            duration: type === "P" ? "0P" : banTime,
        })
        .then( async (response) => {
            if (!response.data.status) return Swal.fire(`Error`, `Error while getting response.`, `error`);
            if (response.data.status === "ok") {
                location.reload();
                Toast.fire({
                    icon: 'success',
                    title: 'Player has been banned.'
                })
            }
            if (response.data.status === "nok") {
                Swal.fire(`There was an error`, `We couldn't ban the player. Please try again later.`, `error`);
            }
            if (response.data.status === "nok2") {
                Swal.fire(`Insufficent Permissions`, `We couldn't perform your requested action. You don't have the right role to perform this action.`, `warning`);
            }
                if (response.data.status === "nok3") {
                    const bans = response.data.bans;
                    await Swal.fire({
                        icon: 'question',
                        title: 'Current Bans:',
                        showConfirmButton: true,
                        confirmButtonText: "New Ban",
                        showCancelButton: true,
                        denyButtonText: `Cancel`,
                        width: 900,
                        html:
                            `
                        <div class='container mx-auto text-center'>
                            <div id='current-bans' class='d-block mx-auto text-center'> </div>
                            <div id='buttons'> </div>                            
                        </div>`,
                        didOpen: () => {
                            const divBans = document.getElementById('current-bans');
                            const table = document.createElement('div');
                            const buttons = document.getElementById('buttons')
                            const butDiv = document.createElement('div');
                            table.innerHTML = `
                                    <div class='mx-auto text-center'>
                                        <table id="datatable" class="table datatable">
                                                <thead>
                                                    <tr>
                                                        <th>SteamID</th>
                                                        <th>Reason</th>
                                                        <th>Expire Date</th>
                                                        <th>Moderator</th>
                                                        <th>Actions</th>
                                                    </tr>
                                                </thead>
                                                <tbody id='elements'></tbody>
                                            </table>
                                        </div>
                                    </div>
                                `;
                            divBans.append(table);
                            for (const user in bans) {
                                const divBan = document.createElement('tr');
                                const elements = document.getElementById('elements')
                                divBan.innerHTML = `
                                <td>
                                    ${bans[user].steamID} 
                                </td>               
                                <td>
                                    ${bans[user].reason} 
                                </td>    
                                <td>
                                    ${bans[user].endDate == 0 ? "Permanent" : new Date( bans[user].endDate ).toLocaleString( { hour12:false } ) } 
                                </td>    
                                <td>
                                    ${bans[user].moderator} 
                                </td>                         
                                <td>
                                    <button onclick="removeBanlist('${bans[user].steamID}', '${bans[user].endDate}')" class="btn btn-outline-danger badge rounded-pill active">Remove</button>
                                    <button onclick="editBanlist('${bans[user].steamID}', '${bans[user].endDate}', '${bans[user].reason}')" class="btn btn-outline-success badge rounded-pill active">Edit</button>
                                </td>
                                `;
                                elements.append(divBan);
                            }
                        }
                    }).then(async (result) => {
                        if (result.isConfirmed) {
                                Swal.fire({
                                    title: 'Ban Details:',
                                    html:
                                        `<div class='d-flex mx-auto'>
                <div class='length mx-auto d-inline-block'>
                    <h4>Length</h4>
                    <input type='number' min="1" id='add_banLength' class='swal2-input' style='position:relative; bottom: 20px; max-width: 100px; height: 47px;'></input>
                </div>
                <div class='type mx-auto d-inline-block'>
                    <h5>Type</h5>
                    <select id='add_selection' class="swal2-select" style='position:relative; border: 1px solid #d9d9d9; border-radius: 5px; bottom: 22px; min-width: 100px; min-height 50px;'>
                        <option id="m">Minutes</option>
                        <option id="d">Days</option>
                        <option id="M">Months</option>
                        <option id="P">Perma</option>
                    </select>
                </div>
            </div>
            <div class='reason mx-auto text-center d-block' style='width:400px'>
                    <h2>Reason:</h2>
                    <input id='add_reason' class='swal2-input mx-auto d-block' style='position:relative; bottom: 5px; width: 400px;'></input>
            </div>
            </div>`,
                                    inputAttributes: {
                                        autocapitalize: 'off'
                                    },
                                    showCancelButton: true,
                                    confirmButtonText: 'Ban',
                                    allowOutsideClick: () => !Swal.isLoading()
                                }).then(async (result) => {
                                    if (result.isConfirmed) {
                                        const selection = document.getElementById('add_selection');
                                        const type = selection.options[selection.selectedIndex].id;
                                        const reason = document.getElementById('add_reason').value;
                                        const length = document.getElementById('add_banLength').value;
                                        let banTime = `${length}${type}`;
                                        if (!reason) return Swal.fire(`Error`, `Reason cannot be empty.`, `error`);
                                        if (!length) return Swal.fire(`Error`, `Ban Length cannot be empty`, `error`);
                                        await axios.post(`${window.location.origin}/squad-api/ban`, {
                                            steamUID: bans[0].steamID,
                                            reason: reason,
                                            duration: banTime,
                                            isNew: true
                                        })
                                            .then((response) => {
                                                if (!response.data.status) return Swal.fire(`Error`, `Error while getting response.`, `error`);
                                                if (response.data.status === "ok") {
                                                    if (window.location.href === `${window.location.origin}/players`) {
                                                        location.reload();
                                                    }
                                                    Toast.fire({
                                                        icon: 'success',
                                                        title: 'Player has been banned.'
                                                    })
                                                }
                                                if (response.data.status === "nok") {
                                                    Swal.fire(`There was an error`, `We couldn't ban the player. Please try again later.`, `error`);
                                                }
                                                if (response.data.status === "nok2") {
                                                    Swal.fire(`Insufficent Permissions`, `We couldn't perform your requested action. You don't have the right role to perform this action.`, `warning`);
                                                }
                                            })
                                            .catch((error) => {
                                                return Swal.fire(`Error`, `Error: ${error}`, `error`);
                                            });
                                    }
                                })
                        }
                    })
                }
            })
            .catch((error) => {
                return Swal.fire(`Error`, `Error: ${error}`, `error`);
            });
        }

        async function editBanlist(steamID, endDate, reason) {
        await Swal.fire({
            icon: 'warning',
            title: 'Editing Ban',
            showConfirmButton: true,
            confirmButtonText: "Edit Ban",
            showCancelButton: true,
            denyButtonText: `Cancel`,
            html:
                `
            <div class='d-flex mx-auto'>
                <div class='length mx-auto d-inline-block'>
                    <h4>Length</h4>
                    <input type='number' min="1" id='newBanLength' class='swal2-input' style='position:relative; bottom: 20px; max-width: 100px; height: 47px;'></input>
                </div>
                <div class='type mx-auto d-inline-block'>
                    <h5>Type</h5>
                    <select id='newSelection' class="swal2-select" style='position:relative; border: 1px solid #d9d9d9; border-radius: 5px; bottom: 22px; min-width: 100px; min-height 50px;'>
                        <option id="m">Minutes</option>
                        <option id="d">Days</option>
                        <option id="M">Months</option>
                        <option id="P">Perma</option>
                    </select>
                </div>
            </div>
            <div class='reason mx-auto text-center d-block' style='width:400px'>
                <h2>Reason:</h2>
                <input id='newReasons' class='swal2-input mx-auto d-block' style='position:relative; bottom: 5px; width: 400px;'></input>
            </div>
            `
        }).then(async (result) => {
            if (result.isConfirmed) {
                const selection = document.getElementById('newSelection');
                const type = selection.options[selection.selectedIndex].id;
                const reason = document.getElementById('newReasons').value;
                const length = document.getElementById('newBanLength').value;
                let banTime = `${length}${type}`;
                if (!reason) return Swal.fire(`Error`, `Reason cannot be empty.`, `error`);
                if (!length) return Swal.fire(`Error`, `Ban Length cannot be empty`, `error`);
                await axios.post(`${window.location.origin}/squad-api/editBan`, {
                    steamUID: steamID,
                    reason: reason,
                    currentDate: endDate,
                    newDate: banTime
                })
                    .then(async (response) => {
                        if (!response.data.status) return Swal.fire(`Error`, `Error while getting response.`, `error`);
                        if (response.data.status === "ok") {
                            location.reload();
                            Toast.fire({
                                icon: 'success',
                                title: 'Player has been banned.'
                            })
                        }
                        if (response.data.status === "nok") {
                            Swal.fire(`There was an error`, `We couldn't ban the player. Please try again later.`, `error`);
                        }
                        if (response.data.status === "nok2") {
                            Swal.fire(`Insufficent Permissions`, `We couldn't perform your requested action. You don't have the right role to perform this action.`, `warning`);
                        }
                    })
            }
        })
    }
    $('input[type="checkbox"]').change(function () {
        $(`label[for="${this.id}"]`).toggleClass('active');
    });
</script>